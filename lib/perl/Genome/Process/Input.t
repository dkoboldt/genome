#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use Test::Exception;
use Test::Deep;
use above 'Genome';
use Sub::Override qw();

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::Process::Input';
use_ok($pkg) || die;

{
    package Genome::TestProcess;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class Genome::TestProcess {
        is => ['Genome::Process'],
        has_optional => [
            non_input => {
            },
            some_non_object_input => {
                is_input => 1,
            },
            some_object_input => {
                is => 'Genome::TestProcess',
                is_input => 1,
            },
            some_is_many_non_object_input => {
                is_input => 1,
                is_many => 1,
            },
            some_is_many_object_input => {
                is => 'Genome::Process',
                is_input => 1,
                is_many => 1,
            },
        ],
    };
}

# Carp does not always play nice with Test::Exception
my $override = Sub::Override->new(
    'Carp::croak' => sub {die @_});

my $p = Genome::TestProcess->create();
throws_ok {$p->some_non_object_input('foo')}
    qr/Assignment value passed to read-only indirect accessor/,
    "is_input properties are immutable";

subtest 'SINGULAR' => sub {
    my $some_object = Genome::TestProcess->create();
    my $p = Genome::TestProcess->create(
        non_input => '<non_input>',
        some_non_object_input => '<some_non_object_input>',
        some_object_input => $some_object,
    );

    my @inputs = $p->inputs;
    is(scalar(@inputs), 2, "Found correct number of inputs");

    is($p->some_non_object_input, '<some_non_object_input>',
        'got non-object input');
    is($p->some_object_input, $some_object, 'got object input');
};

subtest 'IS_MANY' => sub {
    my $some_object = Genome::TestProcess->create();
    my $some_other_object = Genome::TestProcess->create();
    my $p = Genome::TestProcess->create(
        non_input => '<non_input>',
        some_is_many_non_object_input => ['a','c','b'],
        some_is_many_object_input => [$some_object, $some_other_object],
    );

    my @inputs = $p->inputs;
    is(scalar(@inputs), 5, "Found correct number of inputs");

    # TODO change these cmp_bag to is_deeply once UR supports -order_by
    cmp_bag([$p->some_is_many_non_object_input], ['a','c','b'],
        'got non-object is_many input');
    cmp_bag([$p->some_is_many_object_input], [$some_object, $some_other_object],
        'got object is_many input');
};

subtest 'HYBRID CONSTRUCTION' => sub {
    my $some_object = Genome::TestProcess->create();
    my $p = Genome::TestProcess->create(
        inputs => [
            {
                name => 'some_object_input',
                value => $some_object,
            },
        ],
        some_non_object_input => 'foo',
    );

    my @inputs = $p->inputs;
    is(scalar(@inputs), 2, "Found correct number of inputs");

    is($p->some_non_object_input, 'foo', 'got non-object input');
    is($p->some_object_input, $some_object, 'got object input');
};

done_testing();
