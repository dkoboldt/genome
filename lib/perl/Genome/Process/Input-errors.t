#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use Test::Exception;
use above 'Genome';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::Process::Input';
use_ok($pkg) || die;

{
    package Genome::TestProcess;

    use strict;
    use warnings FATAL => 'all';
    use Genome;

    class Genome::TestProcess {
        is => ['Genome::Process'],
        has_optional => [
            some_non_object_input => {
                is_input => 1,
            },
            some_object_input => {
                is => 'Genome::TestProcess',
                is_input => 1,
            },
            some_is_many_non_object_input => {
                is_input => 1,
                is_many => 1,
            },
            some_is_many_object_input => {
                is => 'Genome::Process',
                is_input => 1,
                is_many => 1,
            },
        ],
    };
}

my $object_input = Genome::TestProcess->create();
my $bad_object_input = UR::Value::Text->create('test');

subtest 'NON-OBJECT' => sub {
    # singular
    throws_ok {Genome::TestProcess->create(
        some_non_object_input => ['foo'],
    )} qr/because it is a reference/, "wrong type (ARRAY)";
    throws_ok {Genome::TestProcess->create(
        some_non_object_input => {id => 'foo'},
    )} qr/because it is a reference/, "wrong type (HASH)";
    throws_ok {Genome::TestProcess->create(
        some_non_object_input => $bad_object_input,
    )} qr/because it is a reference/, "wrong type (UR::Value::Text)";

    # is_many
    throws_ok {Genome::TestProcess->create(
        some_is_many_non_object_input => 'foo',
    )} qr/non-arrayref/, "is_many wrong type (SCALAR)";
    throws_ok {Genome::TestProcess->create(
        some_is_many_non_object_input => [['foo']],
    )} qr/because it is a reference/, "is_many wrong type (nested ARRAY)";
};


subtest OBJECT => sub {
    # singular
    throws_ok {Genome::TestProcess->create(
        some_object_input => 'foo',
    )} qr/because it is not a \(Genome::TestProcess\)/, "wrong type (string)";
    throws_ok {Genome::TestProcess->create(
        some_object_input => $bad_object_input,
    )} qr/because it is not a \(Genome::TestProcess\)/,
        "wrong type (some other object type)";
    throws_ok {Genome::TestProcess->create(
        some_object_input => [$bad_object_input],
    )} qr/because it is not a \(Genome::TestProcess\)/, "wrong type (ARRAY)";

    # is_many
    throws_ok {Genome::TestProcess->create(
        some_is_many_object_input => $object_input,
    )} qr/non-arrayref/, "is_many wrong type (not array)";
    throws_ok {Genome::TestProcess->create(
        some_is_many_object_input => [[$object_input]],
    )} qr/because it is not a \(Genome::Process\)/,
        "is_many wrong type (nested ARRAY)";
    throws_ok {Genome::TestProcess->create(
        some_is_many_object_input => ['foo'],
    )} qr/because it is not a \(Genome::Process\)/,
        "is_many wrong type (string)";
    throws_ok {Genome::TestProcess->create(
        some_is_many_object_input => [$bad_object_input],
    )} qr/because it is not a \(Genome::Process\)/,
        "is_many wrong type (some other object type)";
    throws_ok {Genome::TestProcess->create(
        some_is_many_object_input => [[$object_input]],
    )} qr/because it is not a \(Genome::Process\)/,
        "is_many wrong type (ARRAY)";
};


done_testing();
