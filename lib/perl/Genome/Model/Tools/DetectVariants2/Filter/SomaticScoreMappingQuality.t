#!/usr/bin/env genome-perl

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Compare;
use Genome::Test::Factory::SoftwareResult::User;

$ENV{UR_DBI_NO_COMMIT} = 1;
$ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;

BEGIN {
    my $archos = `uname -a`;
    if ($archos !~ /64/) {
        plan skip_all => "Must run from 64-bit machine";
    }
}

use_ok( 'Genome::Model::Tools::DetectVariants2::Filter::SomaticScoreMappingQuality');

my $test_data_dir  = $ENV{GENOME_TEST_INPUTS} . '/Genome-Model-Tools-DetectVariants2-Filter-SomaticScoreMappingQuality';
my $refbuild_id    = 101947881;
my $tumor_bam_file     = $test_data_dir . '/flank_tumor_sorted.bam';
my $normal_bam_file    = $test_data_dir . '/flank_normal_sorted.bam';
my $detector_directory = $test_data_dir."/sniper-0.7.3-";
my $detector_vcf_directory = $test_data_dir."/detector_vcf_result";
my $expected_output_dir = $test_data_dir."/expected_1";

my $result_users = Genome::Test::Factory::SoftwareResult::User->setup_user_hash(
    reference_sequence_build_id => $refbuild_id,
);

my $test_output_dir = Genome::Sys->create_temp_directory;
my $vcf_version = Genome::Model::Tools::Vcf->get_vcf_version;

my $detector_result = Genome::Model::Tools::DetectVariants2::Result->__define__(
    output_dir => $detector_directory,
    detector_name => 'Genome::Model::Tools::DetectVariants2::Sniper',
    detector_params => '',
    detector_version => 'awesome',
    aligned_reads => $tumor_bam_file,
    control_aligned_reads => $normal_bam_file,
    reference_build_id => $refbuild_id,
);
$detector_result->lookup_hash($detector_result->calculate_lookup_hash());

my $detector_vcf_result = Genome::Model::Tools::DetectVariants2::Result::Vcf::Detector->__define__(
    input      => $detector_result,
    output_dir => $detector_vcf_directory,
    aligned_reads_sample => "TEST",
    vcf_version => $vcf_version,
);
$detector_vcf_result->lookup_hash($detector_vcf_result->calculate_lookup_hash());
$detector_result->add_user(user => $detector_vcf_result, label => 'uses');

my $param_str;
run_test('default_params', $param_str, $result_users);

$param_str = '--min-mapping-quality 0';
run_test('non_default_params', $param_str, $result_users);

done_testing();


sub run_test {
    my ($type, $params, $result_users) = @_;
    my $output_dir = $test_output_dir."/$type";
    my $expect_dir = $expected_output_dir."/$type";

    my %params = (
        previous_result_id   => $detector_result->id,
        output_directory     => $output_dir,
        aligned_reads_sample => "TEST",
        result_users         => $result_users,
    );
    
    $params{params} = $params if $params;

    my $ssmq_object = Genome::Model::Tools::DetectVariants2::Filter::SomaticScoreMappingQuality->create(%params);
    
    ok($ssmq_object, 'created SomaticScoreMappingQuality object (default mapping & somatic quality)');
    ok($ssmq_object->execute(), 'executed SomaticScoreMappingQuality object');

    if ($params) {
        my %parameters = split /\s+/, $params;

        for my $parameter (keys %parameters) {
            my $before_value = $parameters{$parameter};
            $parameter =~ s/^\-\-//;
            $parameter =~ s/\-/_/g;
            my $after_value  = $ssmq_object->$parameter;
            ok($before_value eq $after_value, "Parameter $parameter set correctly via params string");
        }
    }

    my @files = qw| snvs.hq
                snvs.lq
                snvs.hq.bed
                snvs.lq.bed 
                snvs.vcf.gz |;

    for my $file (@files) {
        my $test_output     = $output_dir."/".$file;
        my $expected_output = $expect_dir."/".$file;
        my $msg = "Output: $file generated as expected";

        if ($file =~ /vcf\.gz/) {
            my $out_md5    = qx(zcat $test_output     | grep -vP '^##fileDate' | md5sum);
            my $expect_md5 = qx(zcat $expected_output | grep -vP '^##fileDate' | md5sum);
            ok($out_md5 eq $expect_md5, $msg);
        }
        else {
            is(compare($test_output, $expected_output),0, $msg);
        }
    }

    return 1;
}
