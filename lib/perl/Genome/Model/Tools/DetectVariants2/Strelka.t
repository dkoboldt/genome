#!/usr/bin/env perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use File::Path;
use File::Temp;
use Test::More tests=>36;
use above 'Genome';
use Genome::SoftwareResult;
use Genome::Utility::Test qw(compare_ok);
use Genome::Test::Factory::SoftwareResult::User;

my $archos = `uname -a`;
if ($archos !~ /64/) {
    plan skip_all => "Must run from a 64-bit machine";
}
#Use the following if the test are taking too long to run
#elsif(not $ENV{UR_RUN_LONG_TESTS}) {
#    plan skip_all => 'This test currently takes about 20 minutes and is thus skipped. Use `ur test run --long` or set UR_RUN_LONG_TESTS to enable.';
#}

use_ok('Genome::Model::Tools::DetectVariants2::Strelka') or die;

#Define the test dir where test BAMs and pre-generated results files are stored
my $test_dir = $ENV{"GENOME_TEST_INPUTS"} . "/Genome-Model-Tools-DetectVariants2-Strelka/";
ok(-e $test_dir, "Found test dir: $test_dir") or die;

#Define the expected output dir where the expected Strelka results files are stored
my $expected_output_dir = $test_dir . "expected_outputs/2014-12-05";
ok(-e $expected_output_dir, "Created or found expected output dir: $expected_output_dir") or die;

#Define paths to a test tumor and normal BAM file
my $tumor_bam = $test_dir . "tumor.tiny.bam";
ok(-e $tumor_bam, "Found tumor test BAM: $tumor_bam") or die;
my $normal_bam = $test_dir . "normal.tiny.bam";
ok(-e $normal_bam, "Found normal test BAM: $normal_bam") or die;

#Define the output directory for temporary results produced during the test run
my $temp_base_dir = File::Temp::tempdir('Strelka_1.0.7_XXXX', CLEANUP => 1, TMPDIR => 1);
ok(-e $temp_base_dir, "Created a temp dir for output file from this test run: $temp_base_dir") or die;
my $actual_output_dir = "$temp_base_dir/output";

#Use complete reference sequence build
my $refbuild_id = 102671028;
my $ref_seq_build = Genome::Model::Build::ReferenceSequence->get($refbuild_id);

ok($ref_seq_build, 'Obtained human37 reference sequence build from id: ' . $refbuild_id) or die;
my $reference_data_dir = $ref_seq_build->data_directory;
ok(-e $reference_data_dir, "Found reference data directory: $reference_data_dir") or die;

#Define path to a custom reference sequence build dir
my $custom_reference_dir = $test_dir . "custom_reference";
ok(-e $custom_reference_dir, "Found the custom reference dir: $custom_reference_dir");

#Use small reference sequence build by setting up a custom reference genome model
my $reduced_ref_seq_build = Genome::Model::Build::ReferenceSequence->create(
    model => $ref_seq_build->model,
    version => "37",
    data_directory => $custom_reference_dir,
);
ok($reduced_ref_seq_build, "Created a reduced reference sequence build for testing") or die;

my $result_users = Genome::Test::Factory::SoftwareResult::User->setup_user_hash(
    reference_sequence_build => $reduced_ref_seq_build,
);

#Set params option below to be the default for Strelka 0.4.6.2, except reduce the bin size to something suitable for the test reference genome
#e.g. 1500000
my $params_string = "isSkipDepthFilters = 0;depthFilterMultiple = 3.0;snvMaxFilteredBasecallFrac = 0.4;snvMaxSpanningDeletionFrac = 0.75;indelMaxRefRepeat = 8;indelMaxWindowFilteredBasecallFrac = 0.3;indelMaxIntHpolLength = 14;ssnvPrior = 0.000001;sindelPrior = 0.000001;ssnvNoise = 0.0000005;sindelNoise = 0.000001;ssnvNoiseStrandBiasFrac = 0.5;minTier1Mapq = 20;ssnvQuality_LowerBound = 15;sindelQuality_LowerBound = 30;isWriteRealignedBam = 0;binSize = 1500000;extraStrelkaArguments =";

#Create and run the actual Strelka calling job
my $strelka = Genome::Model::Tools::DetectVariants2::Strelka->create(aligned_reads_input=>$tumor_bam, 
                                                                     control_aligned_reads_input=>$normal_bam,
                                                                     reference_build_id => $reduced_ref_seq_build->id,
                                                                     output_directory => $actual_output_dir,
                                                                     version => '1.0.10',
                                                                     params => $params_string,
                                                                     control_aligned_reads_sample => 'TEST_NORMAL',
                                                                     aligned_reads_sample => 'TEST',
                                                                     result_users => $result_users,);
ok($strelka, 'strelka command created');
$strelka->dump_status_messages(1);
my $rv = $strelka->execute;
is($rv, 1, 'Testing for successful execution.  Expecting 1.  Got: '.$rv);

#The first time we run this we will need to save our initial result to diff against
#Genome::Sys->shellcmd(cmd => "cp -r -L $actual_output_dir/* $expected_output_dir");

#Found 74 differing lines in the first test run against the expected result.  
#These all seem to correspond to lines containing dates or randomly generated temp dir paths
foreach my $vcf_result (qw/snvs.hq indels.hq all.somatic.indels.vcf all.somatic.snvs.vcf passed.somatic.indels.vcf passed.somatic.snvs.vcf/) {
    my $expected = `cat $expected_output_dir/output/results/$vcf_result | grep -v "^##fileDate" | grep -v "^##startTime" | grep -v "^##cmdline"`;
    my $actual = `cat $actual_output_dir/output/results/$vcf_result | grep -v "^##fileDate" | grep -v "^##startTime" | grep -v "^##cmdline"`;
    my $diff = Genome::Sys->diff_text_vs_text($actual, $expected);
    ok(!$diff, "output matched expected result for $vcf_result")
    or do {
        diag("Diff: $diff\n");
    }
}

foreach my $gz_vcf_result (qw/indels.vcf.gz snvs.vcf.gz/) {
    my $expected = `zcat $expected_output_dir/$gz_vcf_result | grep -v "^##fileDate" | grep -v "^##startTime" | grep -v       "^##cmdline"`;
    my $actual = `zcat $actual_output_dir/$gz_vcf_result | grep -v "^##fileDate" | grep -v "^##startTime" | grep -v       "^##cmdline"`;
    my $diff = Genome::Sys->diff_text_vs_text($actual, $expected);
    ok(!$diff, "output matched expected result for $gz_vcf_result") 
    or diag("Diff: $diff\n");
}

foreach my $file (qw|output/task.complete indels.hq.bed indels.hq.v1.bed indels.hq.v2.bed indels.lq.bed indels.lq.v1.bed indels.lq.v2.bed snvs.hq.bed snvs.hq.v1.bed snvs.hq.v2.bed snvs.lq.bed snvs.lq.v1.bed snvs.lq.v2.bed strelka_config.ini|) { 
    my $diff = Genome::Sys->diff_file_vs_file("$expected_output_dir/$file", "$actual_output_dir/$file");
    ok(!$diff, "output matched expected result for $file")
    or diag("Diff: $diff\n");
}

my $expected = "$expected_output_dir/output/config/run.config.ini";
my $actual = "$actual_output_dir/output/config/run.config.ini";
compare_ok($expected, $actual,
    name => "output matched expected result for output/config/run.config.ini",
    filters => [qr(^refFile = .*), qr(^configurationCmdline.*), qr(^outDir.*)],
    replace => [[qr(/gscmnt/[^/]+/info/test_suite_data/Genome-Model-Tools-DetectVariants2-Strelka), q(GENOME_TEST_INPUTS)]],
);

$expected = `cat $expected_output_dir/output/Makefile | grep -v "^script_dir" | grep -v "^analysis_dir" | grep -v "^config_file"`;
$actual = `cat $actual_output_dir/output/Makefile | grep -v "^script_dir" | grep -v "^analysis_dir" | grep -v "^config_file"`;
my $diff = Genome::Sys->diff_text_vs_text($actual, $expected);
ok(!$diff, "output matched expected result for output/Makefile")
or diag("Diff: $diff\n");

#system "cp -L -r `readlink $actual_output_dir` /tmp/strelka-rebuild";

#my @diff = `diff -r -x '*chromosomes*' $expected_output_dir $actual_output_dir`;
#ok(@diff == 72 || @diff == 74 || @diff == 98, "Only 72, 74, or 98 differences from expected results and actual were found (the number expected for same and different day testing respectively)")
#or do { 
#  my $diff_line_count = scalar(@diff);
#  diag("$diff_line_count differences are:");
#  diag(@diff);
#  print "\n\nFound $diff_line_count differing lines but expected 72, 74, or 98\n\n";
#  Genome::Sys->shellcmd(cmd => "cp -L -r $actual_output_dir /tmp/last-strelka-test-result");
#};
