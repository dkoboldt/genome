#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
}

use above 'Genome';
use Test::More;
use Genome::Utility::Test qw(compare_ok);
use Genome::Test::Factory::Model::SomaticVariation;
use Genome::Test::Factory::Build;

my $TEST_DATA_VERSION = 2;
my $class = 'Genome::Model::Tools::EpitopePrediction::Pipeline';
use_ok($class);

my $test_dir = Genome::Utility::Test->data_dir_ok($class, $TEST_DATA_VERSION);

subtest "with tsv file" => sub {
    my $input_file = File::Spec->join($test_dir, "input.tsv");
    my $output_dir = Genome::Sys->create_temp_directory;
    my $expected_output = File::Spec->join($test_dir, 'parsed_file.HLA-A02:01.all');

    my $cmd = $class->create(
        input_tsv_file => $input_file,
        output_directory => $output_dir,
        alleles =>'HLA-A02:01',
        epitope_length => 9,
        output_filter => 'all',
        anno_db => 'NCBI-human.ensembl',
        anno_db_version => '67_37l_v2',
        sample_name => 'test',
    );

    ok($cmd, "Created a command");

    ok($cmd->execute, "Command executed");

    compare_ok($cmd->final_output_file('HLA-A02:01'), $expected_output, "Output file is as expected");
};

subtest "with somatic variation build" => sub {
    my $output_dir = Genome::Sys->create_temp_directory;
    my $expected_output = File::Spec->join($test_dir, 'parsed_file.HLA-A02:01.all');

    my $normal_model = Genome::Test::Factory::Model::ReferenceAlignment->setup_object();
    ok($normal_model->isa("Genome::Model::ReferenceAlignment"), "Generated a reference alignment model for normal");

    my $tumor_model  = Genome::Test::Factory::Model::ReferenceAlignment->setup_object(
        subject_id            => $normal_model->subject_id,
        processing_profile_id => $normal_model->processing_profile->id,
    );
    ok($tumor_model->isa("Genome::Model::ReferenceAlignment"), "Generated a reference alignment model for tumor");

    my $annotation_model = Genome::Model::ImportedAnnotation->get(name => 'NCBI-human.ensembl');
    ok($annotation_model->isa("Genome::Model::ImportedAnnotation"), "Generated an imported annotation model");

    my $annotation_build = Genome::Model::Build::ImportedAnnotation->get(
        model_id => $annotation_model->id,
        version  => '67_37l_v2',
        status   => 'Succeeded',
    );
    ok($annotation_build->isa("Genome::Model::Build::ImportedAnnotation"), "Generated an imported annotation build");

    my $somatic_variation_model = Genome::Test::Factory::Model::SomaticVariation->setup_object(
        normal_model     => $normal_model,
        tumor_model      => $tumor_model,
        annotation_build => $annotation_build,
    );
    ok($somatic_variation_model->isa("Genome::Model::SomaticVariation"), "Generated a somatic variation model");
    $somatic_variation_model->subject->name("H_NS-POET0092-4");

    my $somatic_variation_build = Genome::Test::Factory::Build->setup_object(
        model_id         => $somatic_variation_model->id,
        data_directory   => $test_dir,
        status           => "Succeeded",
    );
    ok($somatic_variation_build->isa("Genome::Model::Build::SomaticVariation"), "Generated a somatic variation build");

    my $cmd = $class->create(
        somatic_variation_build => $somatic_variation_build,
        output_directory => $output_dir,
        alleles =>'HLA-A02:01',
        epitope_length => 9,
        output_filter => 'all',
    );

    ok($cmd, "Created a command");

    ok($cmd->execute, "Command executed");

    is($cmd->sample_name, 'H_NS-POET0092-4', "Sample name set correctly");
    is($cmd->anno_db, 'NCBI-human.ensembl', "Annotation database name set correctly");
    is($cmd->anno_db_version, '67_37l_v2', "Annotation database version set correctly");

    compare_ok($cmd->final_output_file('HLA-A02:01'), $expected_output, "Output file is as expected");
};

subtest "with tsv file and multiple alleles" => sub {
    my $input_file = File::Spec->join($test_dir, "input.tsv");
    my $output_dir = Genome::Sys->create_temp_directory;
    my @alleles = qw(HLA-A02:01 HLA-A02:02);

    my $cmd = $class->create(
        input_tsv_file => $input_file,
        output_directory => $output_dir,
        alleles => \@alleles,
        epitope_length => 9,
        output_filter => 'all',
        anno_db => 'NCBI-human.ensembl',
        anno_db_version => '67_37l_v2',
        sample_name => 'test',
    );

    ok($cmd, "Created a command");

    ok($cmd->execute, "Command executed");

    for my $allele (@alleles) {
        my $expected_output = File::Spec->join($test_dir, "parsed_file.$allele.all");
        compare_ok($cmd->final_output_file($allele), $expected_output, "Output file for allele ($allele) is as expected");
    }
};

subtest "with NetMHC version 3.0" => sub {
    my $input_file = File::Spec->join($test_dir, "input.tsv");
    my $output_dir = Genome::Sys->create_temp_directory;
    my $expected_output = File::Spec->join($test_dir, "parsed_file.3.0.all");

    my $cmd = $class->create(
        input_tsv_file => $input_file,
        output_directory => $output_dir,
        alleles =>'A0201',
        epitope_length => 9,
        output_filter => 'all',
        anno_db => 'NCBI-human.ensembl',
        anno_db_version => '67_37l_v2',
        sample_name => 'test',
        netmhc_version => '3.0',
    );

    ok($cmd, "Created a command");

    ok($cmd->execute, "Command executed");

    compare_ok($cmd->final_output_file('A0201'), $expected_output, "Output file is as expected");
};

done_testing();
