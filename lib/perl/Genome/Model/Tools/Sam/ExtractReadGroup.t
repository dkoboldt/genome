#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use above "Genome";
use Test::More;
use Test::Exception;
use File::Basename;
use Genome::Utility::Test qw(compare_ok);

my $pkg = 'Genome::Model::Tools::Sam::ExtractReadGroup';
use_ok($pkg) or die;

my $test_dir = Genome::Utility::Test->data_dir_ok($pkg, 'v1');
my $rg_id    = 2894005341;

subtest 'testing command failure with invalid input' => sub {
    my $cmd = $pkg->create(
        input  => 'no.bam',
        output => 'Fake.bam',
        read_group_id => $rg_id,
    );
    dies_ok(sub {$cmd->execute}, 'Invalid input bam');
};

subtest 'testing command execution' => sub {
    for my $type (qw(namesorted no_namesorted)) {
        my $name = $type . '.bam';
        my $out_bam = Genome::Sys->create_temp_file_path($name);
    
        my %params = (
            input  => File::Spec->join($test_dir, 'test.bam'),
            output => $out_bam,
            read_group_id => $rg_id,
        );
        $params{name_sort} = 1 if $type eq 'namesorted';

        my $cmd = $pkg->create(%params);
        ok($cmd->execute, "Executed $pkg");
        
        my $expected = File::Spec->join($test_dir, 'expected_'.$name);
        compare_ok($expected, $out_bam, "$name generated as expected");
    }
};

done_testing();

