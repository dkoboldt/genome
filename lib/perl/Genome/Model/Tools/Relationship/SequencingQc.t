#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};

use above "Genome";
use File::Temp;
use Test::More;
use Genome::Test::Factory::SoftwareResult::User;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
} elsif(not $ENV{UR_RUN_LONG_TESTS}) {
    plan skip_all => 'This test usually takes 2-3 minutes but can time out in jenkins.  Use `ur test run --long` to enable.';
} else {
    plan tests => 11;
}

my $cmd_class = 'Genome::Model::Tools::Relationship::SequencingQc';
my $sr_class = $cmd_class.'Result';

use_ok($cmd_class);
use_ok($sr_class);

my $test_data_directory = $ENV{GENOME_TEST_INPUTS} . "/Genome-Model-Tools-Relationship-SequencingQc";
my $expected_directory = $test_data_directory . "/expected.v1";
my $test_output_base = File::Temp::tempdir('Genome-Model-Tools-Relationship-SequencingQc-XXXXX', CLEANUP => 1, TMPDIR => 1);

# TODO less hardcody test params
my @bams = qw(
    /gscmnt/gc8002/info/model_data/2882398427/build125446203/alignments/119116265.bam
    /gscmnt/gc8002/info/model_data/2882404755/build125446372/alignments/119135579.bam
    /gscmnt/gc8001/info/model_data/2882403051/build125446442/alignments/119116365.bam
);
my @snp_files = qw(
    /gscmnt/gc8002/info/model_data/2882398427/build125446203/variants/snvs.hq.bed
    /gscmnt/gc8002/info/model_data/2882404755/build125446372/variants/snvs.hq.bed
    /gscmnt/gc8001/info/model_data/2882403051/build125446442/variants/snvs.hq.bed
);
my $reference_fasta = "/gscmnt/sata420/info/model_data/2857786885/build102671028/all_sequences.fa";

my %test_params = (
    output_dir => $test_output_base,
    bams => \@bams,
    snp_files => \@snp_files,
    reference_fasta => $reference_fasta,
);

my $result_users = Genome::Test::Factory::SoftwareResult::User->setup_user_hash();

my $cmd = $cmd_class->create(%test_params, result_users => $result_users);

my $output_file = $test_output_base."/strong_relationships.tsv";
my $expected_file = $expected_directory."strong_relationships.tsv";

ok($cmd, "created SequencingQc object");
ok($cmd->execute(), "executed SequencingQc");

delete $test_params{'output_dir'};
my $software_result = $sr_class->get_with_lock(%test_params, users => $result_users);
ok($software_result, "Found software result via get_with_lock");
ok($cmd->software_result, "Got software result from the command");
is($software_result, $cmd->software_result, 'Software results match as expected');

# Make sure that the order of bams and snp files does not affect the software result
my @missorted_bams = ($bams[1], $bams[0], $bams[2]);
$test_params{bams} = \@missorted_bams;
my @missorted_snp_files = ($snp_files[2], $snp_files[0], $snp_files[1]);
$test_params{snp_files} = \@missorted_snp_files;
my $software_result2 = $sr_class->get_with_lock(%test_params, users => $result_users);
ok($software_result2, "Found software result via get_with_lock, despite mis-ordered params");
is($software_result2, $cmd->software_result, 'Software results match as expected');

# But removing one does
pop(@missorted_bams);
pop(@missorted_snp_files);
$test_params{bams} = \@missorted_bams;
$test_params{snp_files} = \@missorted_snp_files;
my $software_result3 = $sr_class->get_with_lock(%test_params, users => $result_users);
ok(!$software_result3, "Failed to find software result, as expected");

ok(-s $output_file, "output of SequencingQc exists");

done_testing();
