#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
};

use above 'Genome';

require File::Temp;
require Genome::Utility::Test;
use Test::More;

use_ok('Genome::Model::GenotypeMicroarray::Command::ExtractToVcf') or die;
use_ok('Genome::Model::GenotypeMicroarray::Test') or die;

my $build = Genome::Model::GenotypeMicroarray::Test::example_build();
my $variation_list_build = $build->dbsnp_build;
my $instrument_data = $build->instrument_data;

# RESOLVE SOURCE
my $extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    sample => $build->model->subject,
    variation_list_build => $variation_list_build,
); # FIXME test sample priority
$extract->resolve_source;
is($extract->source, $instrument_data, 'resolve_source from sample is instdata');

$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    model => $build->model,
);
$extract->resolve_source;
is($extract->source, $instrument_data, 'resolve_source from model is instdata');

$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    instrument_data => $instrument_data,
    variation_list_build => $variation_list_build,
);
$extract->resolve_source;
is($extract->source, $instrument_data, 'resolve_source from instdata is instdata');

# SUCCESS
my $tmpdir = File::Temp::tempdir(CLEANUP => 1);
my $output_vcf = $tmpdir.'/genotypes.vcf';
$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    build => $build,
    output => $output_vcf,
);
ok($extract, 'create extract command');
ok($extract->execute, 'execute extract command');
is_deeply($extract->alleles, { 'TC' => 1, 'AA' => 1, 'CC' => 2, 'AG' => 3, 'TT' => 1, 'GG' => 1 }, 'alleles match');
is($extract->genotypes_input, 9, 'genotypes input');
is($extract->genotypes_output, 9, 'genotypes output');
is($extract->genotypes_filtered, 0, 'genotypes filtered');
Genome::Utility::Test::compare_ok($output_vcf, $build->original_genotype_vcf_file_path, 'vcf matches');

# FAILS
# no source
$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create();
ok(!$extract->execute, 'failed to execute command w/o source');
is($extract->error_message, 'No source given! Can be build, model, instrument data or sample.', 'correct error');

# instdata w/o variation list build
$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    instrument_data => $instrument_data,
);
ok(!$extract->execute, 'failed to execute command from instdata w/o variation list build');
is($extract->error_message, 'Variation list build is required to get genotypes for an instrument data!', 'correct error');

# sample w/o variation list build
$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    sample => $instrument_data->sample,
);
ok(!$extract->execute, 'failed toexecute command from instdata w/o variation list build');
is($extract->error_message, 'Variation list build is required to get genotypes for a sample!', 'correct error');

# request external inst data from sample w/o any
$extract = Genome::Model::GenotypeMicroarray::Command::ExtractToVcf->create(
    sample => $instrument_data->sample,
    sample_type_priority => [qw/ external /],
    variation_list_build => $variation_list_build,
);
ok(!$extract->_resolve_source_for_sample, 'failed to resolve from sample requesting external inst data, but there is none');
is($extract->error_message, 'No instrument data found matches the indicated priorities (external) for sample (__TEST_SAMPLE__ (2879594813))!', 'correct error');

# request default inst data from sample w/o any
$instrument_data->import_source_name('NOT INTERNAL');
$instrument_data->sample->default_genotype_data_id(undef);
$extract->sample_type_priority([qw/ default /]);
ok(!$extract->_resolve_source_for_sample, 'failed to resolve for sample requesting default inst data, but there is none');
is($extract->error_message, 'No instrument data found matches the indicated priorities (default) for sample (__TEST_SAMPLE__ (2879594813))!', 'correct error');

done_testing();
