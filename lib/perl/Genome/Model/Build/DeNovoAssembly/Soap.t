#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';
use Workflow::Simple;

use File::Compare;
use File::Temp;
use List::MoreUtils;

use Test::More;

if (Genome::Config->arch_os ne 'x86_64') {
    plan skip_all => 'requires 64-bit machine';
}

use_ok('Genome::Model::Build::DeNovoAssembly::Soap') or die;

my $base_dir = $ENV{GENOME_TEST_INPUTS} . '/Genome-Model/DeNovoAssembly';

print $base_dir."\n";

my $archive_path = $base_dir.'/inst_data/-7777/archive.tgz';
ok(-s $archive_path, 'inst data archive path') or die;
my $example_dir = $base_dir.'/soap_v18';
ok(-d $example_dir, 'example dir') or die;

my $tmpdir_template = "/DeNovoAssembly-Soap.t-XXXXXXXX";
my $tmpdir = File::Temp::tempdir($tmpdir_template, CLEANUP => 1, TMPDIR => 1);
ok(-d $tmpdir, 'temp dir: '.$tmpdir);


my $taxon = Genome::Taxon->create(
    name => 'Escherichia coli TEST',
    domain => 'Bacteria',
    current_default_org_prefix => undef,
    estimated_genome_size => 4500000,
    current_genome_refseq_id => undef,
    ncbi_taxon_id => undef,
    ncbi_taxon_species_name => undef,
    species_latin_name => 'Escherichia coli',
    strain_name => 'TEST',
);
ok($taxon, 'taxon') or die;
my $sample = Genome::Sample->create(
    id => -1234,
    name => 'TEST-000',
);
ok($sample, 'sample') or die;
my $library = Genome::Library->create(
    id => -12345,
    name => $sample->name.'-testlibs',
    sample_id => $sample->id,
    library_insert_size => 260,
);
ok($library, 'library') or die;

my $instrument_data = Genome::InstrumentData::Solexa->create(
    id => -7777,
    sequencing_platform => 'solexa',
    read_length => 100,
    subset_name => '8-CGATGT',
    index_sequence => 'CGATGT',
    run_name => 'XXXXXX/8-CGATGT',
    run_type => 'Paired',
    flow_cell_id => 'XXXXXX',
    lane => 8,
    library => $library,
    archive_path => $archive_path,
    clusters => 15000,
    fwd_clusters => 15000,
    rev_clusters => 15000,
    analysis_software_version => 'GAPipeline-0.3.0',
);
ok($instrument_data, 'instrument data');
ok($instrument_data->is_paired_end, 'inst data is paired');
ok(-s $instrument_data->archive_path, 'inst data archive path');

my $pp = Genome::ProcessingProfile::DeNovoAssembly->create(
    name => 'De Novo Assembly Soap PGA Test',
    assembler_name => 'soap de-novo-assemble',
    assembler_version => '1.04',
    assembler_params => '-kmer_size 31 -resolve_repeats -kmer_frequency_cutoff 1',
    read_processor => 'trim bwa-style -trim-qual-level 10 | filter by-length -filter-length 35 | rename illumina-to-pcap',
    post_assemble => 'standard-outputs -min_contig_length 10',
);
ok($pp, 'pp') or die;

my $model = Genome::Model::DeNovoAssembly->create(
    processing_profile => $pp,
    subject_name => $taxon->name,
    subject_type => 'species_name',
    center_name => 'WUGC',
);
ok($model, 'soap de novo model') or die;
ok($model->add_instrument_data($instrument_data), 'add inst data to model');

my $build = Genome::Model::Build::DeNovoAssembly->create(
    model => $model,
    data_directory => $tmpdir,
);
ok($build, 'created build');
my @invalid_tags = $build->validate_for_start;
print Data::Dumper::Dumper(@invalid_tags);
ok(!@invalid_tags, 'build can start');
my $example_build = Genome::Model::Build->create(
    model => $model,
    data_directory => $example_dir,
);
ok($example_build, 'create example build');

my $workflow = $model->_resolve_workflow_for_build($build);
$workflow->validate();
ok($workflow->is_valid, 'workflow validated');

my %workflow_inputs = $model->map_workflow_inputs($build);
my %expected_workflow_inputs = (
        build => $build,
        instrument_data => [$instrument_data],
    );
is_deeply(\%workflow_inputs, \%expected_workflow_inputs,
    'map_workflow_inputs succeeded');

my $workflow_xml = $workflow->save_to_xml();
my $success = Workflow::Simple::run_workflow($workflow_xml, %workflow_inputs);
ok($success, 'workflow completed');


my $file_prefix = $build->file_prefix;
is($file_prefix, Genome::Utility::Text::sanitize_string_for_filesystem($model->subject_name).'_WUGC', 'file prefix');
my $library_file_base = $build->data_directory.'/'.$file_prefix;

my ($inst_data) = $build->instrument_data;
ok($inst_data, 'instrument data for build');
my $library_id = $inst_data->library_id;
ok($library_id, 'library id for inst data');

my $sx_processor = Genome::Model::DeNovoAssembly::SxReadProcessor->create(processor => $pp->read_processor);
$sx_processor->determine_processing($instrument_data);
my $sx_result_params = $sx_processor->sx_result_params_for_instrument_data($instrument_data);
my $result_users = Genome::SoftwareResult::User->user_hash_for_build($build);
my $sx_result = Genome::InstrumentData::SxResult->get_with_lock(%$sx_result_params, users => $result_users);
for my $file_name ( $sx_result->read_processor_output_files ) {
    my $file = $build->data_directory.'/'.$file_name;
    ok(-l $build->data_directory.'/'.$file_name, 'processed file exists: '.$file);
    my $example_file = $example_build->data_directory.'/'.$file_name;
    is(File::Compare::compare($file, $example_file), 0, 'processed file matches');
    print Data::Dumper::Dumper($file, $example_file);
}

# ASSEMBLE - IMPORT RUSAGE/PARAMS
my %assembler_params = $build->assembler_params;
is_deeply(
    \%assembler_params,
    {
        'version' => '1.04',
        'resolve_repeats' => 1,
        'config_file' => $build->data_directory.'/config_file',
        'kmer_size' => '31',
        'cpus' => 1,
        'kmer_frequency_cutoff' => '1',
        'output_dir_and_file_prefix' => $build->data_directory.'/Escherichia_coli_TEST_WUGC'
    },
    'assembler params',
);

# ASSEMBLE
ok(-s $assembler_params{config_file}, 'created config file');
my $config_fh = eval{ Genome::Sys->open_file_for_reading($assembler_params{config_file}); };
my $config = join('', $config_fh->getlines);
$config_fh->close;
my $expected_config = <<CONFIG;
max_rd_len=120
[LIB]
map_len=60
asm_flags=3
pair_num_cutoff=2
reverse_seq=0
avg_ins=260
CONFIG
$expected_config .= 'q1='.$build->data_directory.'/'.$instrument_data->id.".1.fastq\n";
$expected_config .= 'q2='.$build->data_directory.'/'.$instrument_data->id.".2.fastq\n";
is($config, $expected_config, 'config matches');
my @file_exts = qw/ contig         gapSeq        links     peGrads
                    preGraphBasic  readOnContig  scafSeq   updated.edge
                    ContigIndex    edge          kmerFreq  newContigIndex
                    preArc         readInGap     scaf      scaf_gap        
                    vertex
                    /;
foreach my $ext ( @file_exts ) {
    my $example_file = $example_build->soap_output_file_for_ext($ext);
    ok(-s $example_file, "Example $ext file exists");
    my $file = $build->soap_output_file_for_ext($ext);
    ok(-s $file, "$ext file exists");
    is(File::Compare::compare($example_file, $file), 0, "$ext files match");
}

# POST ASSEMBLE
for my $file_name ( qw/ contigs.bases supercontigs.fasta supercontigs.agp / ) {
    my $example_file = $example_dir.'/edit_dir/'.$file_name;
    ok(-e $example_file, "$file_name example file exists");
    my $file = $build->data_directory.'/edit_dir/'.$file_name;
    ok(-e $file, "$file_name file exists");
    is(File::Compare::compare($file, $example_file), 0, "$file_name files match");
}

# Report and Metrics
ok( -s $build->reports_directory.'/Summary/report.html', 'create summary html');
ok( -s $build->stats_file, 'created stats file' );
ok( -s $example_build->stats_file, 'example build stats file exists' );
is(File::Compare::compare($example_build->stats_file,$build->stats_file), 0,
    'stats files match');

my %expected_metrics = (
    'assembly_length' => 162049,
    'contigs_average_length' => 115,
    'contigs_count' => 1411,
    'contigs_length' => 162049,
    'contigs_major_average_length' => 412,
    'contigs_major_count' => 2,
    'contigs_major_length' => 824,
    'contigs_major_n50_count' => 1,
    'contigs_major_n50_length' => 439,
    'contigs_n50_count' => 601,
    'contigs_n50_length' => 101,
    'genome_size' => 4500000,
    'insert_size' => '260',
    'major_contig_threshold' => '300',
    'reads_assembled' => 0,
    'reads_assembled_duplicate' => 0,
    'reads_assembled_success' => 'NA',

    'reads attempted' => '30000',
    'reads processed' => '28028',
    'reads processed success', => '0.934',

    'reads_attempted' => '30000',
    'reads_processed' => '28028',
    'reads_processed_success' => '0.934',
    'supercontigs_average_length' => 115,
    'supercontigs_count' => 1407,
    'supercontigs_length' => 162049,
    'supercontigs_major_average_length' => 412,
    'supercontigs_major_count' => 2,
    'supercontigs_major_length' => 824,
    'supercontigs_major_n50_count' => 1,
    'supercontigs_major_n50_length' => 439,
    'supercontigs_n50_count' => 597,
    'supercontigs_n50_length' => 101,
);

my @build_metric_names = sort(map {$_->name} $build->metrics);

my @unique_build_metric_names = sort(List::MoreUtils::uniq(@build_metric_names));

is_deeply(\@build_metric_names, \@unique_build_metric_names,
    'no duplicate metrics');

my @expected_metric_names = sort(keys %expected_metrics);
is_deeply(\@build_metric_names, \@expected_metric_names,
    'expected metric names match');

for my $metric_name (@build_metric_names) {
    is($build->get_metric($metric_name), $expected_metrics{$metric_name},
        "metric ok: '$metric_name'" );
}

done_testing();
