#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_COMMAND_DUMP_STATUS_MESSAGES} = 1;
}

use strict;
use warnings;

use above 'Genome';

require File::Compare;
use Test::More;
use List::MoreUtils qw(any);

use_ok('Genome::Model::Build::MetagenomicComposition16s::ProcessInstrumentData') or die;
use_ok('Genome::Model::Build::MetagenomicComposition16s::MergeProcessedInstrumentData') or die;

use_ok('Genome::Model::Build::MetagenomicComposition16s::TestBuildFactory') or die;
my ($build, $example_build) = Genome::Model::Build::MetagenomicComposition16s::TestBuildFactory->build_with_example_build_for_454;
ok($build && $example_build, 'Got build and example_build');

my @amplicon_sets = $build->amplicon_sets_for_processing;
my @example_amplicon_sets = $example_build->amplicon_sets_for_processing;
ok(@amplicon_sets && @example_amplicon_sets, 'Got amplicon sets');

# PROCESS
my $instrument_data = $build->instrument_data;
my $process = Genome::Model::Build::MetagenomicComposition16s::ProcessInstrumentData->create(
    input_build => $build,
    instrument_data => $instrument_data,
);
ok($process, 'create process inst data cmd');
ok($process->execute, 'execute process inst data cmd');

my %sx_result_params = $build->sx_result_params_for_instrument_data($instrument_data);
ok(%sx_result_params, 'Got sx result params for build inst data');
my @sx_results = Genome::InstrumentData::SxResult->get_with_lock(%sx_result_params);
is(@sx_results, 1, 'Got an SX result for inst data');
my @users = map { $_->user } map { $_->users } @sx_results;
ok(any(sub { $_ eq $build}, @users), 'Build is registered as user for SX result');

for ( my $i = 0; $i < @amplicon_sets; $i++ ) { 
    my $set_name = $amplicon_sets[$i]->name;
    is($set_name, $example_amplicon_sets[$i]->name, "set name: $set_name");
    for my $type (qw/ processed_fastq_file /) {
        my $file = $amplicon_sets[$i]->$type;
        my $basename = File::Basename::basename($file);
        my $sx_file = $sx_results[0]->output_dir.'/'.$basename;
        ok(-s $sx_file, "$type exists for set $set_name");
    }
}

# MERGE
my $merge = Genome::Model::Build::MetagenomicComposition16s::MergeProcessedInstrumentData->create(
    input_build => $build,
);
ok($merge, 'create merge inst data cmd');
ok($merge->execute, 'execute merge inst data cmd');

is($build->amplicons_attempted, 20, 'amplicons_attempted');
is($build->amplicons_processed, 14, 'amplicons_processed');
is($build->amplicons_processed_success, '0.70', 'amplicons_processed_success');

for ( my $i = 0; $i < @amplicon_sets; $i++ ) { 
    my $set_name = $amplicon_sets[$i]->name;
    is($set_name, $example_amplicon_sets[$i]->name, "set name: $set_name");
    for my $type (qw/ processed_fasta_file processed_qual_file /) {
        my $file = $amplicon_sets[$i]->$type;
        ok(-s $file, "$type exists for set $set_name");
        my $example_file = $example_amplicon_sets[$i]->$type;
        ok(-s $example_file, "example $type name exists for set $set_name");
        is(File::Compare::compare($file, $example_file), 0, "generated $type matches example");
    }
}

my $expected_metrics = {
    in => { bases => 9810, count => 20, },
    out => { bases => 6794, count => 14, },
};
for my $type (qw/ in out /) {
    my $metrics_file = $build->fasta_dir.'/metrics.processed.'.$type.'.txt';
    ok(-s $metrics_file, $type.' metrics files');
    my $metrics = Genome::Model::Tools::Sx::Metrics->from_file($metrics_file);
    for my $name (qw/ bases count /) {
        is($metrics->$name, $expected_metrics->{$type}->{$name}, "$type $name");
    }
}

#print join("\n", $sx_results[0]->output_dir, $build->data_directory, $example_build->data_directory)."\n"; <STDIN>;
done_testing();
