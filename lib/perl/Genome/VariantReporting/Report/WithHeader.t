#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::Exception;
use Test::More;
use Genome::VariantReporting::Framework::Plan::TestHelpers;

my $pkg = "Genome::VariantReporting::Report::WithHeader";
use_ok($pkg);

{
    package Test::BadReport;

    class Test::BadReport {
        is => 'Genome::VariantReporting::Report::WithHeader',
    };

    sub name {
        "bad_report";
    }

    sub required_interpreters {
        return qw(interpreter_y);
    }

    sub headers {
        return qw(different_field);
    }
    1;
}

{
    package Genome::VariantReporting::DuplicateInterpreter;

    class Genome::VariantReporting::DuplicateInterpreter {
        is => 'Genome::VariantReporting::Framework::Component::Interpreter',
    };
    sub name {
        'duplicate';
    }
    sub field_descriptions {
        return (
            chrom => 'Description of chrom',
        );
    }
}

{
    package Test::BadReport2;

    class Test::BadReport2 {
        is => 'Genome::VariantReporting::Report::WithHeader',
    };

    sub name {
        "bad_report2";
    }

    sub required_interpreters {
        return qw(interpreter_y duplicate);
    }

    sub headers {
        return qw(chrom);
    }
    1;
}

my $report = Test::BadReport->__define__(
    filters => {},
    interpreters => {
        interpreter_y => Genome::VariantReporting::AnotherTestInterpreter->create()
    },
);
my @errors = $report->_validation_errors;
is(scalar(@errors), 1, 'Found an error') || die;
ok(($errors[0])->desc =~ /\(different_field\) is not defined/,
    'Error is of correct type');

$report = Test::BadReport2->__define__(
        filters => {},
        interpreters => {
            interpreter_y => Genome::VariantReporting::AnotherTestInterpreter->create(),
            duplicate =>  Genome::VariantReporting::DuplicateInterpreter->create(),
        },
);

throws_ok(sub {
        $report->_validation_errors,
}, qr/Fields are not unique/, "Report does not validate");

done_testing;

