#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::Exception;
use Test::Deep qw/cmp_bag/;
use Test::More;
use Genome::File::Vcf::Entry;

my $pkg = "Genome::VariantReporting::Generic::VariantCallersInterpreter";
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

subtest "sample 1" => sub {
    my $sample_name = "S1";
    my %expected_return_values = (
        C => {
            variant_callers => [qw/Sniper Strelka/],
            variant_caller_count => 2,
        },
        G => {
            variant_callers => [qw/Strelka/],
            variant_caller_count => 1,
        },
    );
    run_test($sample_name, %expected_return_values);
};

subtest "sample 1 with sample alt alleles only" => sub {
    my $sample_name = "S1";
    my %expected_return_values = (
        C => {
            variant_callers => [qw/Sniper Strelka/],
            variant_caller_count => 2,
        },
    );
    run_test($sample_name, %expected_return_values);
};

subtest "sample 1 with other alt allele only" => sub {
    my $sample_name = "S1";
    my %expected_return_values = (
        G => {
            variant_callers => [qw/Strelka/],
            variant_caller_count => 1,
        },
    );
    run_test($sample_name, %expected_return_values);
};

subtest "sample 2" => sub {
    my $sample_name = "S2";
    my %expected_return_values = (
        C => {
            variant_callers => [qw/Strelka/],
            variant_caller_count => 1,
        },
        G => {
            variant_callers => [qw/Strelka/],
            variant_caller_count => 1,
        },
    );
    run_test($sample_name, %expected_return_values);
};

subtest "sample 3" => sub {
    my $sample_name = "S3";
    my %expected_return_values = (
        C => {
            variant_callers => [],
            variant_caller_count => 0,
        },
        G => {
            variant_callers => [],
            variant_caller_count => 0,
        },
    );
    run_test($sample_name, %expected_return_values);
};

subtest "sample with non-valid caller" => sub {
    my $sample_name = "S4";
    my %expected_return_values = (
        C => {
            variant_callers => [qw/Sniper Strelka/],
            variant_caller_count => 2,
        },
        G => {
            variant_callers => [qw/Strelka/],
            variant_caller_count => 1,
        },
    );
    run_test($sample_name, %expected_return_values);
};

done_testing;

sub run_test {
    my $sample_name = shift;
    my %expected_return_values = @_;

    my $interpreter = $pkg->create(
        valid_callers => [qw(VarscanSomatic Sniper Strelka)],
        sample_name => $sample_name,
    );
    lives_ok(sub {$interpreter->validate}, "Filter validates ok");

    my $entry = create_entry();

    my %result = $interpreter->interpret_entry($entry, [keys %expected_return_values]);
    is_deeply(\%result, \%expected_return_values, "Sample ($sample_name) return values as expected");
}

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=A,Number=1,Type=String,Description="Info field A">
##INFO=<ID=C,Number=A,Type=String,Description="Info field C (per-alt)">
##INFO=<ID=E,Number=0,Type=Flag,Description="Info field E">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S1-[VarscanSomatic]	S1-[Sniper]	S1-[Strelka]	S2	S2-[VarscanSomatic]	S2-[Sniper]	S2-[Strelka]	S3	S3-[VarscanSomatic]	S3-[Sniper]	S3-[Strelka]	S4	S4-[VarscanSomatic]	S4-[Sniper]	S4-[Strelka]	S4-[Samtools]

EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',            # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        'A=B;C=8,9;E',  # INFO
        'GT:DP',     # FORMAT
        "0/1:12",   # FIRST_SAMPLE
        "0/0:12",   # FIRST_SAMPLE_Varscan
        "1/1:12",   # First_SAMPLE_Sniper
        "1/2:12",   # First_SAMPLE_Strelka
        "0/0:12",   # SECOND_SAMPLE
        ".",   # SECOND_SAMPLE_Varscan
        ".",   # SECOND_SAMPLE_Sniper
        "1/2:12",   # Second_SAMPLE_Strelka
        ".",   # THIRD_SAMPLE
        ".",   # THIRD_SAMPLE_Varscan
        ".",   # THIRD_SAMPLE_Sniper
        ".",   # THIRD_SAMPLE_Strelka
        "0/1:12",   # FOURTH_SAMPLE
        "0/0:12",   # FOURTH_SAMPLE_Varscan
        "1/1:12",   # FOURTH_SAMPLE_Sniper
        "1/2:12",   # FOURTH_SAMPLE_Strelka
        "0/1:12",   # FOURTH_SAMPLE_Samtools
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
