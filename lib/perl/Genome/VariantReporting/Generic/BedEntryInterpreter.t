#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;

my $pkg = "Genome::VariantReporting::Generic::BedEntryInterpreter";
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

subtest "one alt allele" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        C => {
            chromosome_name => '1',
            start           => 9,
            stop            => 10,
        }
    );
    my $entry = create_entry();
    is_deeply({$interpreter->interpret_entry($entry, ['C'])}, \%expected_return_values, "Entry gets interpreted correctly");
};


subtest "two alt allele" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        C => {
            chromosome_name => '1',
            start           => 9,
            stop            => 10,
        },
        G => {
            chromosome_name => '1',
            start           => 9,
            stop            => 10,
        },
    );
    my $entry = create_entry();
    is_deeply({$interpreter->interpret_entry($entry, ['C', 'G'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "insertion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        AT => {
            chromosome_name => '1',
            start           => 10,
            stop            => 10,
        },
        ATT => {
            chromosome_name => '1',
            start           => 10,
            stop            => 10,
        },
    );
    my $entry = create_entry("A", "AT", "ATT");
    is_deeply({$interpreter->interpret_entry($entry, ['AT', 'ATT'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "ambiguous insertion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    my %expected_return_values = (
        AGGGGGC => {
            chromosome_name => '1',
            start           => 10,
            stop            => 10,
        },
    );
    my $entry = create_entry("AGC","AGGGGGC");
    is_deeply({$interpreter->interpret_entry($entry, ['AGGGGGC',])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "offset insertion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    # ACA--C
    # ACAGTC

    my %expected_return_values = (
        ACAGTC => {
            chromosome_name => '1',
            start           => 12,
            stop            => 12,
        },
    );
    my $entry = create_entry("ACAC","ACAGTC");
    is_deeply({$interpreter->interpret_entry($entry, ['ACAGTC',])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "deletion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    # two examples here. Report coordinates are for the deleted bases.
    # VCF typically reports the base before the indel, but this isn't required
    # as long as alleles are non-empty.
    #       111
    #       012
    # Ref:  ATT
    # Alt1: A-T
    # Alt2: A--
    my %expected_return_values = (
        AT => {
            chromosome_name => '1',
            start           => 10,
            stop            => 11,
        },
        A => {
            chromosome_name => '1',
            start           => 10,
            stop            => 12,
        },
    );
    my $entry = create_entry("ATT", "AT", "A");
    is_deeply({$interpreter->interpret_entry($entry, ['AT', 'A'])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "ambiguous deletion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    # GTTTC
    # G--TC

    my %expected_return_values = (
        GTC => {
            chromosome_name => '1',
            start           => 10,
            stop            => 12,
        },
    );
    my $entry = create_entry("GTTTC", "GTC",);
    is_deeply({$interpreter->interpret_entry($entry, ['GTC',])}, \%expected_return_values, "Entry gets interpreted correctly");
};

subtest "offset deletion" => sub {
    my $interpreter = $pkg->create();
    lives_ok(sub {$interpreter->validate}, "Interpreter validates");

    # GTGTAC
    # GT---C

    my %expected_return_values = (
        GTC => {
            chromosome_name => '1',
            start           => 11,
            stop            => 14,
        },
    );
    my $entry = create_entry("GTGTAC", "GTC",);
    is_deeply({$interpreter->interpret_entry($entry, ['GTC',])}, \%expected_return_values, "Entry gets interpreted correctly");
};

done_testing;

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##FILTER=<ID=PASS,Description="Passed all filters">
##FILTER=<ID=BAD,Description="This entry is bad and it should feel bad">
##INFO=<ID=A,Number=1,Type=String,Description="Info field A">
##INFO=<ID=C,Number=A,Type=String,Description="Info field C (per-alt)">
##INFO=<ID=E,Number=0,Type=Flag,Description="Info field E">
##FORMAT=<ID=GT,Number=1,Type=String,Description="Genotype">
##FORMAT=<ID=DP,Number=1,Type=Integer,Description="Depth">
##FORMAT=<ID=FT,Number=.,Type=String,Description="Filter">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	S1	S2	S3	S4
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my ($ref, @alts) = @_;
    unless (defined $ref) {
        $ref = "A";
        @alts = qw(C G);
    }
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        $ref,           # REF
        join(",", @alts), # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
        'A=B;C=8,9;E',  # INFO
        'GT:DP',     # FORMAT
        "0/1:12",   # FIRST_SAMPLE
    );

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
