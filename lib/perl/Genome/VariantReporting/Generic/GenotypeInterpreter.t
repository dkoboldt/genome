#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use above 'Genome';
use Genome::VariantReporting::Suite::BamReadcount::TestHelper qw(create_no_readcount_entry);
use Genome::File::Vcf::Entry;
use Test::More;
use Test::Exception;

my $pkg = 'Genome::VariantReporting::Generic::GenotypeInterpreter';
use_ok($pkg) or die;
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

my $entry = create_no_readcount_entry();

subtest "sample 1" => sub {
    my $interpreter = $pkg->create( sample_name => 'S1' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        C => { genotype => 'not called' },
        G => { genotype => 'heterozygous' },
        AA => { genotype => 'not called' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['G', 'C', 'AA'])}, \%expected_return_values, "return values as expected");
};

subtest "sample 1 with sample alt allele only" => sub {
    my $interpreter = $pkg->create( sample_name => 'S1' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        G => { genotype => 'heterozygous' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['G'])}, \%expected_return_values, "return values as expected");
};

subtest "sample 1 with other alt allele only" => sub {
    my $interpreter = $pkg->create( sample_name => 'S1' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        C => { genotype => 'not called' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['C'])}, \%expected_return_values, "return values as expected");
};

subtest "sample 2" => sub {
    my $interpreter = $pkg->create( sample_name => 'S2' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        C => { genotype => 'heterozygous' },
        G => { genotype => 'heterozygous' },
        AA => { genotype => 'not called' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['G', 'C', 'AA'])}, \%expected_return_values, "return values as expected");
};

subtest "sample 3" => sub {
    my $interpreter = $pkg->create( sample_name => 'S3' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        C => { genotype => 'not called' },
        G => { genotype => 'homozygous' },
        AA => { genotype => 'not called' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['G', 'C', 'AA'])}, \%expected_return_values, "return values as expected");
};

subtest "sample 4" => sub {
    my $interpreter = $pkg->create( sample_name => 'S4' );
    lives_ok(sub {$interpreter->validate}, "Interpreter validates ok");

    my %expected_return_values = (
        C => { genotype => 'not called' },
        G => { genotype => 'not called' },
        AA => { genotype => 'homozygous' },
    );
    is_deeply({$interpreter->interpret_entry($entry, ['G', 'C', 'AA'])}, \%expected_return_values, "return values as expected");
};

done_testing();
