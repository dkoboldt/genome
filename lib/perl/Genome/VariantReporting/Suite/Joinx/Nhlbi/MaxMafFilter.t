#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;
use Genome::File::Vcf::Entry;

my $pkg = "Genome::VariantReporting::Suite::Joinx::Nhlbi::MaxMafFilter";
use_ok($pkg);
my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('filters', $pkg->name), $pkg);

subtest "Fails" => sub {
    my $filter = $pkg->create(
        max_maf => "0.1",
        population_code => "All",
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $entry = create_entry(join(",",0.7,0.1,0.2));

    my %expected_return_values = (
        C => 0,
        G => 0,
    );
    is_deeply({$filter->filter_entry($entry)}, \%expected_return_values);
};

subtest "Passes" => sub {
    my $filter = $pkg->create(
        max_maf => "0.1",
        population_code => "All",
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $entry = create_entry(join(",",0.7,0.1,0.09));

    my %expected_return_values = (
        C => 1,
        G => 1,
    );
    is_deeply({$filter->filter_entry($entry)}, \%expected_return_values);
};
subtest "No MAF for entry" => sub {
    my $filter = $pkg->create(
        max_maf => ".1",
        population_code => "All",
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $entry = create_entry();

    my %expected_return_values = (
        C => 1,
        G => 1,
    );
    is_deeply({$filter->filter_entry($entry)}, \%expected_return_values);
};
subtest "Malformed MAF" => sub {
    my $filter = $pkg->create(
        max_maf => ".1",
        population_code => "EU",
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");

    my $entry = create_entry("1");

    throws_ok(sub {$filter->filter_entry($entry)}, qr(MAF in unexpected format));
};

subtest "test vcf_id and vcf_description" => sub {
    my $filter = $pkg->create(
        max_maf => '.5',
        population_code => 'All',
    );
    lives_ok(sub {$filter->validate}, "Filter validates ok");
    my $vcf_id = 'MAXMAFALL5';
    my $vcf_description = 'Filter out variants with All maf being greater than .5';
    is($filter->vcf_id, $vcf_id, 'filter vcf_id is created correctly');
    is($filter->vcf_description, $vcf_description, 'filter vcf_description is created correctly');
};

sub create_vcf_header {
    my $header_txt = <<EOS;
##fileformat=VCFv4.1
##INFO=<ID=MAF,Number=.,Type=Float,Description="MAF">
#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO
EOS
    my @lines = split("\n", $header_txt);
    my $header = Genome::File::Vcf::Header->create(lines => \@lines);
    return $header
}

sub create_entry {
    my $maf = shift;
    my @fields = (
        '1',            # CHROM
        10,             # POS
        '.',            # ID
        'A',            # REF
        'C,G',            # ALT
        '10.3',         # QUAL
        'PASS',         # FILTER
    );
    if (defined $maf) {
        push @fields, "MAF=$maf";
    }
    else {
        push @fields, ".";
    }

    my $entry_txt = join("\t", @fields);
    my $entry = Genome::File::Vcf::Entry->new(create_vcf_header(), $entry_txt);
    return $entry;
}
done_testing;

