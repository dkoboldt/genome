#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use above 'Genome';
use Genome::VariantReporting::Framework::TestHelpers qw(
    get_reference_build
    get_translation_provider
    test_dag_xml
);

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::VariantReporting::Command::CreateMergedReports';
use_ok($pkg) || die;

my $code_test_dir = __FILE__ . '.d';
my $test_dir = Genome::Sys->create_temp_directory;
Genome::Sys->rsync_directory(
    source_directory => $code_test_dir,
    target_directory => $test_dir
);

my $RESOURCE_VERSION = 2;
my $provider = get_translation_provider(version => $RESOURCE_VERSION);
my $reference_sequence_build => get_reference_build(version => $RESOURCE_VERSION);

my $feature_list_cmd = Genome::FeatureList::Command::Create->create(
    reference => $reference_sequence_build,
    file_path => test_data("feature_list.bed"),
    format => "true-BED",
    content_type => "roi",
    name => "test",
);
my $feature_list = $feature_list_cmd->execute;
$provider->translations({%{$provider->translations}, feature_list_ids => {TEST => $feature_list->id}});
$provider->write_to_file(test_data('snvs_translations.yaml'));


my $cmd = $pkg->create(
    snvs_input_vcf => test_data('snvs.vcf.gz'),
    snvs_plan_file => test_data('snvs_plan.yaml'),
    snvs_translations_file => test_data('snvs_translations.yaml'),

    indels_input_vcf => test_data('snvs.vcf.gz'),
    indels_plan_file => test_data('snvs_plan.yaml'),
    indels_translations_file => test_data('snvs_translations.yaml'),

    use_header_from => 'snvs',
);
isa_ok($cmd, $pkg);

test_dag_xml($cmd->dag, __FILE__);

done_testing();

sub test_data {
    return File::Spec->join($test_dir, @_);
}
