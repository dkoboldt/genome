#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use above 'Genome';
use Genome::Utility::Test qw(compare_ok);
use Test::Exception;
use Test::Output;
use Genome::VariantReporting::Framework::Plan::TestHelpers; # defines classes

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::VariantReporting::Framework::Plan::MasterPlan';
use_ok($pkg) || die;
test_bad_translations('missing_expert_translation', qr(Plan is incompatible with translations file) );
test_bad_translations('missing_interpreter_translation', qr(Plan is incompatible with translations file) );
test_bad_translations('missing_filter_translation', qr(Plan is incompatible with translations file) );

done_testing();


sub test_bad_translations {
    my $name = shift;
    my $error_regex = shift;

    my $filename = $name . '.yaml';

    my $plan_file = yaml_file("translated_plan.yaml");
    my $translations_file = yaml_file($filename);
    my $plan = $pkg->create_from_file($plan_file);
    ok($plan, sprintf("Made a plan from file ($plan_file)."));
    my $translations_provider = Genome::VariantReporting::Framework::Component::RuntimeTranslations->create_from_file($translations_file);
    ok($translations_provider, sprintf("Made a translations provider from file ($translations_file)."));

    throws_ok sub {$plan->validate_translation_provider($translations_provider);}, $error_regex, "Validation fails for incompatible plan and translations file ($name).";
}

sub yaml_file {
    my $filename = shift;
    return File::Spec->join(__FILE__ . ".d", $filename);
}


