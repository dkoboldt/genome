#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use File::Basename qw(basename);
use File::Copy::Recursive qw(dircopy);
use Genome::Utility::Test qw(compare_ok);
use Genome::Test::Factory::Process;
use Genome::VariantReporting::Framework::Plan::TestHelpers;
use Genome::VariantReporting::Command::Wrappers::TestHelpers qw(
    compare_directories_and_files
);

my $pkg = "Genome::VariantReporting::Framework::GenerateReport";

use_ok($pkg);

my $data_dir = __FILE__.".d";
my $vcf_file = File::Spec->join($data_dir, "test.vcf");
my $plan = Genome::VariantReporting::Framework::Plan::MasterPlan->create_from_file(File::Spec->join($data_dir, "test.yaml"));

my $translations = { untranslated => 'translated'};
my $provider = Genome::VariantReporting::Framework::Component::RuntimeTranslations->create(
    translations => $translations,
);

$plan->validate();
$plan->validate_translation_provider($provider);
$plan->translate($provider->translations);

my $process = Genome::Test::Factory::Process->setup_object();

for my $report_name (qw(report_alpha report_gamma)) {
    subtest "report_name = $report_name" => sub {
        my $generator = $pkg->create(
            input_vcf => $vcf_file,
            plan_json => $plan->as_json,
            report_name => 'report_alpha',
            variant_type => "snvs",
            process_id => $process->id,
            label => $report_name,
        );
        ok($generator->isa($pkg), "Generator created ok");
        ok($generator->execute, "Generator executed ok");

        my $result = $generator->output_result;
        my $expected_directory = File::Spec->join($data_dir,
            'expected', $report_name);

        if ($ENV{GENERATE_TEST_DATA}) {
            local $File::Copy::Recursive::RMTrgDir = 1;
            dircopy($result->output_dir, $expected_directory);
        }
        compare_directories_and_files($result->output_dir,
            $expected_directory);
    }
}

done_testing;

