#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Test::Exception;

my $pkg = 'Genome::VariantReporting::Framework::Test::WithManySampleNamesInterpreter';
use_ok($pkg);

my $factory = Genome::VariantReporting::Framework::Factory->create();
isa_ok($factory->get_class('interpreters', $pkg->name), $pkg);

my $interpreter = $pkg->create(sample_names => ['S1', 'S2']);
ok($interpreter, "Interpreter created successfully");
lives_ok(sub {$interpreter->validate}, "Interpreter validates successfully");

my @expected_available_fields = qw(S1_info S2_info);

is_deeply([$interpreter->available_fields($interpreter->sample_names)], \@expected_available_fields, "Available fields as expected");
is($interpreter->create_sample_specific_field_name('info', 'S1'), 'S1_info', "Sample specific field name as expected");
is_deeply([$interpreter->create_sample_specific_field_names(['info'])], ['S1_info', 'S2_info'], "Sample specific field names as expected");

subtest "With Label" => sub {
    my $interpreter = $pkg->create(
        sample_names => ['S1', 'S2'],
        sample_name_labels => {
            S1 => 'S1_is_a_great_sample',
        },
    );
    ok($interpreter, "Interpreter created successfully");
    lives_ok(sub {$interpreter->validate}, "Interpreter validates successfully");

    is_deeply([$interpreter->create_sample_specific_field_names(['info'])], ['S1_is_a_great_sample_info', 'S2_info'], "Sample specific field names as expected");
};

done_testing;
