#!/usr/bin/env genome-perl

use strict;
use warnings FATAL => 'all';

use Test::More;
use Test::Exception;
use above 'Genome';
use Genome::VariantReporting::Framework::TestHelpers qw(
    get_translation_provider
    get_plan_object
);

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

my $pkg = 'Genome::VariantReporting::Framework::Component::Expert::Command';
use_ok($pkg) || die;

my $RESOURCE_VERSION = 2;
my $data_dir = __FILE__.".d";

my $provider = get_translation_provider(version => $RESOURCE_VERSION);

my $plan_file = File::Spec->join($data_dir, 'plan.yaml');
my $plan = get_plan_object( plan_file => $plan_file, provider => $provider );

my $obj = Genome::VariantReporting::Framework::Test::Run->create(
    input_vcf => __FILE__,
    variant_type => 'snvs',
    plan_json => $plan->as_json,
);

my %input_hash = $obj->input_hash;
is($input_hash{'input_vcf'}, __FILE__, 'input_vcf entry is as expected');
ok(exists($input_hash{'input_vcf_lookup'}) && ($input_hash{'input_vcf_lookup'} ne $input_hash{'input_vcf'}),
    'input_vcf_lookup entry exists and is not the same as input_vcf');
is($input_hash{'variant_type'}, 'snvs', 'variant_type entry is as expected');
ok(!exists $input_hash{'variant_type_lookup'}, 'variant_type_lookup entry absent as expected');

lives_ok { $obj->resolve_plan_attributes } 'resolve_plan_attributes execute successfully';
is($obj->__planned__, 'foo', 'Value of __planned__ is as expected');

done_testing();
