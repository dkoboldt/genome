#!/usr/bin/env genome-perl

BEGIN { 
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
}

use strict;
use warnings;

use above "Genome";
use Test::More;
use Genome::Utility::Test qw(compare_ok);
use Genome::Test::Factory::Sample;
use Genome::Test::Factory::Library;
use Genome::Test::Factory::InstrumentData::Imported;
use Genome::Test::Factory::Model::ImportedVariationList;
use Genome::Test::Factory::Build;
use Genome::Test::Factory::SoftwareResult::User;

my $package = 'Genome::InstrumentData::Microarray::Result::Vcf';

use_ok($package);
my $test_dir = Genome::Utility::Test->data_dir_ok($package, "v2");

my ($sample, $dbsnp_build) = setup_objects();

my $result = Genome::InstrumentData::Microarray::Result::Vcf->get_or_create(
                                sample => $sample,
                                known_sites_build => $dbsnp_build,
                                filters => ["chromosome:exclude=X,Y,MT"],
                                users => Genome::Test::Factory::SoftwareResult::User->setup_user_hash(),
                            );
ok($result->isa("Genome::InstrumentData::Microarray::Result::Vcf"), "Vcf result was created");
ok(-s $result->vcf_path, "Vcf in result has size");
compare_ok($result->vcf_path, File::Spec->join($test_dir, "expected.vcf"), "Vcf matched expected output");

done_testing;

sub setup_objects {
    my $sample = Genome::Test::Factory::Sample->setup_object();
    my $lib = Genome::Test::Factory::Library->setup_object(sample_id => $sample->id, name => $sample->name."-microarraylib");
    my $id = Genome::Test::Factory::InstrumentData::Imported->setup_object(
        library_id => $lib->id,
        import_source_name => "tgi",
        genotype_file => $test_dir.'/1.genotype',
    );
    ok(-s $id->genotype_file, 'genotype file set');
    $sample->default_genotype_data_id($id->id);

    my $tmp_dir = Genome::Sys->create_temp_directory;
    Genome::Sys->copy_file(File::Spec->join($test_dir, "1.vcf"),
                            File::Spec->join($tmp_dir, "snvs.hq.vcf"));
    my $dbsnp_result = Genome::Model::Tools::DetectVariants2::Result::Manual->__define__(output_dir => $tmp_dir);
    my $dbsnp_model = Genome::Test::Factory::Model::ImportedVariationList->setup_object();
    my $dbsnp_build = Genome::Test::Factory::Build->setup_object(model_id => $dbsnp_model->id, version => "fake",
                                                                snv_result => $dbsnp_result);
    $dbsnp_build->reference->allosome_names("X,Y,MT");
    return ($sample, $dbsnp_build);
}
