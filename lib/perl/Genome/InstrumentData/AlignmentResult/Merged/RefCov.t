#!/usr/bin/env genome-perl

use strict;
use warnings;

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
    $ENV{NO_LSF} = 1;
};

use Test::More;

use above 'Genome';
use Genome::Test::Factory::SoftwareResult::User;

if ($] < 5.010) {
    plan skip_all => "this test is only runnable on perl 5.10+"
} elsif (`uname -a` !~ /64/) {
    plan skip_all => "this test requires 64-bit architecture"
} else {
    plan tests => 5;
}

use_ok('Genome::InstrumentData::AlignmentResult::Merged::RefCov');

my $data_dir = $ENV{GENOME_TEST_INPUTS} . '/Genome-InstrumentData-AlignmentResult-Merged-CoverageStats';

my ($merged_result, $feature_list) = &setup_data();

my $result_users = Genome::Test::Factory::SoftwareResult::User->setup_user_hash(
    reference_sequence_build => $merged_result->reference_build,
);

my %refcov_stats_params = (
    alignment_result_id => $merged_result->id,
    region_of_interest_set_id => $feature_list->id,
    minimum_depths => '1,10,20',
    alignment_count => 1,
    print_min_max =>1,
    print_headers =>1,
    embed_bed =>1,
    use_short_roi_names => 0,
    roi_track_name => '',
    users => $result_users,
);

my $refcov_result = Genome::InstrumentData::AlignmentResult::Merged::RefCov->get_or_create(%refcov_stats_params);
isa_ok($refcov_result, 'Genome::InstrumentData::AlignmentResult::Merged::RefCov', 'sucessful run');

#my $refcov_stats = $refcov_result->refcov_stats_hash_ref;
#ok($refcov_stats, 'produced stats');

my $refcov_result2 = Genome::InstrumentData::AlignmentResult::Merged::RefCov->get_with_lock(%refcov_stats_params);
is($refcov_result2, $refcov_result, 'got same result for get() after get_or_create()');

#my $refcov_result3 = Genome::InstrumentData::AlignmentResult::Merged::RefCov->get_or_create(%refcov_stats_params);
#isa_ok($refcov_result3, 'Genome::InstrumentData::AlignmentResult::Merged::RefCov', 'sucessful run');
#isnt($refcov_result3, $refcov_result, 'produced different result');

sub setup_data {

    my $refseq = Genome::Model::Build::ReferenceSequence->get_by_name('NCBI-human-build36');

    my $merged_result = Genome::InstrumentData::AlignmentResult::Merged->__define__(
        id => '-10000', #hardcoded so calculated 'bam_file' returns expected result
        output_dir => ($data_dir . '/merged_result'),
        reference_build => $refseq,
    );
    $merged_result->lookup_hash($merged_result->calculate_lookup_hash());
    isa_ok($merged_result, 'Genome::InstrumentData::AlignmentResult::Merged', 'created merged result');

    my $fl_cmd = Genome::FeatureList::Command::Create->create(
        name => 'test for coverage-stats',
        format => 'true-BED',
        file_path => ($data_dir .  '/feature_list/roi.bed'),
        reference => $refseq,
        content_type => 'roi',
        description => 'test data',
    );
    my $feature_list = $fl_cmd->execute();
    isa_ok($feature_list, 'Genome::FeatureList', 'created feature list');

    return ($merged_result, $feature_list);
}
