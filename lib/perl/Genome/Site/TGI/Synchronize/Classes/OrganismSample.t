#!/usr/bin/env genome-perl

BEGIN {
    $ENV{UR_DBI_NO_COMMIT} = 1;
    $ENV{UR_USE_DUMMY_AUTOGENERATED_IDS} = 1;
};

use strict;
use warnings;

use above 'Genome';
use Test::More;

my $lims_class = 'Genome::Site::TGI::Synchronize::Classes::OrganismSample';
use_ok($lims_class) or die;

my $entity_name = $lims_class->entity_name;
ok($entity_name, 'entity name');
my $expected_genome_class = 'Genome::'.ucfirst($entity_name);
is($lims_class->genome_class_for_comparison, $expected_genome_class, 'genome class for create');
is($lims_class->genome_class_for_create, $expected_genome_class, 'genome class for create');

my @properties_to_copy = $lims_class->properties_to_copy;
ok(@properties_to_copy, 'properties to copy');
is(@properties_to_copy, 12, 'properties to copy count');
my @properties_to_keep_updated = $lims_class->properties_to_keep_updated;
ok(@properties_to_keep_updated, 'properties to keep updated');
cmp_ok(@properties_to_copy, '>', @properties_to_keep_updated, 'more properties to copy than keep updated');

my $i = -100;
my %properties = map {
    $_ => $i++,
} @properties_to_copy;
my $lims_object = $lims_class->__define__(%properties);
ok($lims_object, "define lims $entity_name object");

my $genome_object = $lims_object->create_in_genome;
ok($genome_object, "create genome $entity_name object");
isa_ok($genome_object, $expected_genome_class);

for my $property ( @properties_to_copy ) {
    my $value = eval{ $genome_object->$property; };
    $value = eval{ $genome_object->attributes(attribute_label => $property)->attribute_value; } if not defined $value;
    is($value, $properties{$property}, "genome and lims $property matches => $value");
}

done_testing();

